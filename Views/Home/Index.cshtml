@using KornikTournament.Helpers
@using KornikTournament.Enums
@{
    ViewBag.Title = "Ogłoszenia";
    Layout = "_Layout";
}

<h2 class="text-center">Ogłoszenia</h2>

@if (TournamentSettingsHelper.GetTournamentState() == ETournamentState.OnGoing || TournamentSettingsHelper.GetTournamentState() == ETournamentState.EntriesEnded)
{
    <div class="d-flex justify-content-around">
        <div>
            <h4 class="text-light">Start turnieju za: </h4>
            <h5 id="startOfTournament" class="text-secondary"></h5>
        </div>
        @if (TournamentSettingsHelper.GetTournamentState() == ETournamentState.OnGoing)
        {
        <div>
            <h4 class="text-light">Koniec zapisów za: </h4>
            <h5 id="endOfEntries" class="text-secondary"></h5>
        </div>
        }
    </div>   
}

<div class="d-flex justify-content-center">
    <div class="announcements">
        @foreach (var announcement in ViewData["Announcements"] as IList<Announcement> ?? new List<Announcement>())
        {
            <div class="text-center p-5 m-4 announcement">
                @{
                    var hour = announcement.TimeAdded.Value.Hour + 1;
                    var minutes = announcement.TimeAdded.Value.Minute;
                }
                
                <span>@announcement.TimeAdded!.Value.Date.ToString("M") @hour:@switch(minutes)
                                                                           {
                                                                               case < 10:
                                                                                   var m = $"0{minutes}";
                                                                                   @m
                                                                                   break;
                                                                               default:
                                                                                   @minutes
                                                                                   break;
                                                                           }
                </span>
                <h1 class="fw-bold">@announcement.Title</h1>
                <p>@announcement.Content</p>

                @if (!string.IsNullOrEmpty(announcement.ImageUrl))
                {
                    <img src="@announcement.ImageUrl" alt="" class="d-block m-auto w-50 text-center"/>
                }

                @if (Context.User.IsInRole("admin"))
                {
                    <div class="m-2">
                        @using (Html.BeginForm("DeleteAnnouncement", "Home", FormMethod.Post))
                        {
                            <input type="hidden" name="id" value=@announcement.Id />
                            <input type="submit" value="Usuń" class="btn btn-danger right"/>
                        }
                    </div>
                }

            </div>
        }
    </div>
</div>

<style>
    .announcement {
        border-radius: 30px;
        background: rgb(25, 27, 30);
    }
</style>

@{
    var settings = TournamentSettingsHelper.Read();
}

<script>
let a = setInterval(endOfEntries = () => {
    const date = new Date('@settings.EntriesEnd.ToString("yyyy-MM-ddTHH:mm:ss")');
    const now = new Date().getTime();
    const dif = date - now;

    let days = Math.floor(dif / (1000 * 60 * 60 * 24));
    let hours = Math.floor((dif % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    let minutes = Math.floor((dif % (1000 * 60 * 60)) / (1000 * 60));
    let seconds = Math.floor((dif % (1000 * 60)) / 1000);

    formatTheTimer(days, hours, minutes, seconds, "endOfEntries");
    
    if (dif < 0) {
        clearInterval(a);
        document.getElementById("endOfEntries").innerHTML = "";
    }
}, 100);

let x = setInterval(startOfTournament = () => {
    const date = new Date('@settings.StartDate.ToString("yyyy-MM-ddTHH:mm:ss")');
    const now = new Date().getTime();
    const dif = date - now;

    let days = Math.floor(dif / (1000 * 60 * 60 * 24));
    let hours = Math.floor((dif % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    let minutes = Math.floor((dif % (1000 * 60 * 60)) / (1000 * 60));
    let seconds = Math.floor((dif % (1000 * 60)) / 1000);

    formatTheTimer(days, hours, minutes, seconds, "startOfTournament");

    if (dif < 0) {
        clearInterval(x);
        document.getElementById("startOfTournament").innerHTML = "";
    }
}, 100);

const formatTheTimer = (days, hours, minutes, seconds, id) => {
    let e = document.getElementById(id);
    
    if (days > 0) {
        e.innerHTML = days + " dni " + hours + " godzin ";
    }
    
    if (days < 1) {
        e.innerHTML = hours + " godzin "
            + minutes + " minut ";
        
        e.classList.remove("text-secondary");
        e.classList.add("text-danger");
    }
    
    if (days < 1 && hours < 1) {
        e.innerHTML = minutes + " minut " + seconds + " sekund ";
        
        e.classList.remove("text-secondary");
        e.classList.add("text-danger");
    }
    
    if (days < 1 && hours < 1 && minutes < 1) {
        
        if (seconds < 5) {
            e.innerHTML = seconds + " sekundy ";
        } else {
            e.innerHTML = seconds + " sekund";
        }
        
        if (seconds === 1) {
            e.innerHTML = seconds + " sekunda";
        } else {
            e.innerHTML = seconds + " sekund";
        }
        
        e.classList.remove("text-secondary");
        e.classList.add("text-danger");
    }
    
    return e;
}
</script>